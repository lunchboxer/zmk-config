#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY 0
#define BLUETOOTH 1
#define NUM 2

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        /*            KEY POSITIONS

          0  1  2  3  4         5  6  7  8  9
         10 11 12 13 14        15 16 17 18 19
         20 21 22 23 24        25 26 27 28 29
                   30 31      32 33             */

        Left_Reset {
            bindings = <&bootloader>;
            key-positions = <0 4 20 24>;
        };

        Right_Reset {
            bindings = <&bootloader>;
            key-positions = <5 9 29 25>;
        };

        Escape {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        Delete {
            bindings = <&kp DEL>;
            key-positions = <2 3>;
        };

        BluetoothLayer {
            bindings = <&sl 1>;
            key-positions = <4 14 24>;
        };

        Media {
            bindings = <&sl 4>;
            key-positions = <28 26>;
        };

        power {
            bindings = <&kp C_POWER>;
            key-positions = <28 27 26>;
        };

        Enter_left {
            bindings = <&kp ENTER>;
            key-positions = <11 30>;
            layers = <>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
     &kp Q       &kp W        &kp E         &kp R        &kp T          &kp Y         &kp U        &kp I       &kp O          &kp P
&mt LALT A  &mt LGUI S  &mt LCTRL D  &mt LSHIFT F        &kp G          &kp H  &mt RSHIFT J  &mt LCTRL K  &mt LGUI L  &mt LALT SEMI
     &kp Z       &kp X        &kp C         &kp V        &kp B          &kp N         &kp M    &kp COMMA     &kp DOT       &kp FSLH
                                        &lt 2 TAB  &lt 3 SPACE    &lt 2 ENTER      &kp BSPC
            >;
        };

        bluetooth_layer {
            bindings = <
&trans  &out OUT_TOG  &out OUT_USB  &out OUT_BLE  &bt BT_SEL 0    &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans    &bt BT_PRV    &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans    &bt BT_NXT    &trans  &trans  &trans  &trans  &trans
                                          &trans    &bt BT_CLR    &trans  &trans
            >;
        };

        num_layer {
            bindings = <
&kp GRAVE  &trans  &kp INSERT  &trans            &trans     &kp LEFT_BRACE  &kp N7  &kp N8  &kp N9     &kp MINUS
   &trans  &trans      &trans  &trans  &kp SINGLE_QUOTE    &kp RIGHT_BRACE  &kp N4  &kp N5  &kp N6      &kp PLUS
   &trans  &trans      &trans  &trans            &trans        &kp INT_YEN  &kp N1  &kp N2  &kp N3  &kp ASTERISK
                               &trans            &trans             &trans  &kp N0
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &trans          &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans  &trans  &trans            &trans          &trans        &trans           &trans  &trans
                        &trans  &trans            &trans          &trans
            >;

            label = "NAV";
        };

        media_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
&trans  &trans  &trans  &trans  &trans    &kp C_STOP   &kp C_PLAY_PAUSE   &kp C_PREVIOUS            &kp C_NEXT                &trans
&trans  &trans  &trans  &trans  &trans        &trans             &trans           &trans                &trans                &trans
                        &trans  &trans        &trans             &trans
            >;
        };

        blank_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
